name: CI/CD

# Controls when the workflow will run
on:
  pull_request:
    types:
      - opened
      - synchronize
      - closed
  release:
    types: [released]

jobs:
  setup-env:
    name: Debug
    runs-on: ubuntu-latest
    steps:
      - name : Echo github
        env : { CONTENT : "${{ toJson(github) }}" }
        run : "echo $CONTENT"

  execute-ci:
    name: CI
    runs-on: ubuntu-latest
    # runs only when pushing to a branch other than develop or master, or when creating a pull request on master or develop
    if: github.event_name == 'pull_request' && github.event.action != 'closed' && contains(toJSON('["develop", "master"]'), github.base_ref)
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: imagick gd bcmath intl zip
          tools: composer:v2
          coverage: xdebug
#        env:
#          fail-fast: true
#          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
      - name: Install dependencies
        run: |
            composer install --no-interaction --no-progress --no-suggest
#
#      - name: PHPStan Static Analysis
#        # PHPStan report errors with absolute path from runner, which is not accepted by Sonar yet
#        run: |
#          cd ${{ env.PATH_RELEASES }}/ && vendor/bin/phpstan --error-format=prettyJson > phpstan-results.json || true
#          sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace@g' phpstan-results.json
#
      - name: Run unit tests
        run: |
          cd ${{ env.PATH_RELEASES }}/ 
          cp .env.test.example .env.test
          vendor/bin/phpunit --coverage-clover=coverage.xml --log-junit=tests-report.xml
#          sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace@g' coverage.xml
#          sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace@g' tests-report.xml
#
#      - name: SonarQube Scan - PR Decoration
#        uses: sonarsource/sonarqube-scan-action@master
#        with:
#          projectBaseDir: ./api
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#
#      - name: SonarQube Quality Gate check
#        if: github.base_ref == 'develop'
#        uses: sonarsource/sonarqube-quality-gate-action@master
#        # Force to fail step after specific time
#        timeout-minutes: 5
#
#
#  build-artifact:
#    # runs when merging PR
#    name: Build Artifact
#    runs-on: ubuntu-latest
#    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && contains(toJSON('["develop", "master"]'), github.base_ref)
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2.4.0
#        with:
#          fetch-depth: 0
#
#      - name: Upload Artifact
#        uses: actions/upload-artifact@v2.2.4
#        id: upload-artifact
#        with:
#          name: ${{ github.base_ref }}
#          path: ${{ env.PATH_RELEASES }}
#          retention-days: 5
#
#  create-release:
#      # runs only when pushing to master with a merge PR, create a release
#      name: Create Release
#      needs: [build-artifact]
#      if: github.event_name == 'pull_request' && github.event.pull_request.merged == true  && github.base_ref == github.event.repository.default_branch
#      runs-on: ubuntu-latest
#      steps:
#        - name: Release Drafter
#          id: release-drafter
#          uses: release-drafter/release-drafter@v5.15.0
#          with:
#            config-name: config-release-drafter.yml
#            commitish: master
#            prerelease: true
#          env:
#            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#        - name: Download Artifact
#          uses: actions/download-artifact@v2.0.10
#          with:
#            name: ${{ github.base_ref }}
#
#        - name: Install PHP
#          uses: shivammathur/setup-php@v2
#          with:
#            php-version: '7.4'
#            extensions: imagick gd bcmath intl zip
#            tools: composer:v2
#            coverage: xdebug
#          env:
#            fail-fast: true
#            COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#        - name: Install dependencies
#          run: |
#            composer install --no-interaction --no-progress --no-suggest
#
#        - name: PHPStan Static Analysis
#          # PHPStan report errors with absolute path from runner, which is not accepted by Sonar yet
#          run: |
#            vendor/bin/phpstan --error-format=prettyJson > phpstan-results.json || true
#            sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace@g' phpstan-results.json
#
#        - name: Run unit tests
#          run: |
#            cp .env.test.example .env.test
#            vendor/bin/phpunit --coverage-clover=coverage.xml --log-junit=tests-report.xml
#            sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace@g' coverage.xml
#            sed -i 's@'$GITHUB_WORKSPACE'@/github/workspace@g' tests-report.xml
#
#        - name: SonarQube Scan - Release
#          #Sonar new version analysis
#          uses: sonarsource/sonarqube-scan-action@master
#          with:
#            projectBaseDir: .
#            args: >
#              -Dsonar.projectKey=Smart-Push_api
#              -Dsonar.projectVersion=${{ steps.release-drafter.outputs.tag_name }}
#          env:
#            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#            SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#
#        - name: Create asset
#          run:
#            zip -r ${{ github.base_ref }}-${{ steps.release-drafter.outputs.tag_name }}.zip . -x vendor* .scannerwork*
#          working-directory: .
#
#        - name: Upload Release Asset
#          id: upload-release-asset
#          uses: actions/upload-release-asset@v1
#          env:
#            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          with:
#            upload_url: ${{ steps.release-drafter.outputs.upload_url }}
#            asset_path: ${{ github.base_ref }}-${{ steps.release-drafter.outputs.tag_name }}.zip
#            asset_name: ${{ github.base_ref }}-${{ steps.release-drafter.outputs.tag_name }}.zip
#            asset_content_type: application/zip
#
#  publish-branch:
#    # runs only when pushing to a develop, deploy on preprod
#    name: Publish branch to preprod
#    needs: [build-artifact]
#    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.ref_name == 'develop'
#    runs-on: ubuntu-latest
#    steps:
#      - name: Slack message - deployment start
#        uses: tokorom/action-slack-incoming-webhook@main
#        env:
#          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#        with:
#          text: API - Preprod deployment start
#          attachments: |
#            [
#              {
#                "color": "#57db76",
#                "blocks": [
#                  {
#                    "type": "section",
#                    "fields": [
#                      {
#                        "type": "mrkdwn",
#                        "text": "*action*: deploy (<${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}|follow>)"
#                      },
#                      {
#                        "type": "mrkdwn",
#                        "text": "*branch*: ${{ github.ref_name }} (<${{ github.event.pull_request.html_url }}|PR>)"
#                      }
#                    ]
#                  },
#                  {
#                    "type": "context",
#                    "elements": [
#                      {
#                        "type": "mrkdwn",
#                        "text": "launched by: ${{ github.actor }}"
#                      }
#                    ]
#                  }
#                ]
#              }
#            ]
#      - name: Download Artifact
#        uses: actions/download-artifact@v2.0.10
#        with:
#            name: ${{ github.base_ref }}
#
#      - name: Check out SP Github action
#        uses: actions/checkout@v2.4.0
#        with:
#          repository: Smart-Push/github-actions
#          ref: v1.0.4
#          token: ${{ secrets.REPOS_ACCESS_TOKEN }}
#          path: ./.github/actions
#
#      - name: Get hosts matrix
#        id: hosts-matrix
#        uses: ./.github/actions/hosts-matrix
#
#      - name: Prepare SSH
#        uses: shimataro/ssh-key-action@v2.3.0
#        with:
#          key: ${{ secrets.DEPLOY_PRIVATE_KEY }}
#          known_hosts: ${{ secrets.DEPLOY_KNOWN_HOST }}
#
#      - name: Deploy & change symlinks
#        env:
#          TARGET_ENV: ${{ fromJSON(steps.hosts-matrix.outputs.host)[github.ref_name] }}
#        run: |
#          ssh ${{ env.TARGET_ENV }}@${{ secrets.DEPLOY_SSH_HOST }} <<EOF
#            cd ${{ env.PATH_RELEASES }} && rm -rf releases/${{ github.base_ref }} && cd ..
#          EOF
#          scp -r ../${{ env.PATH_RELEASES }}/ ${{ env.TARGET_ENV }}@${{ secrets.DEPLOY_SSH_HOST }}:~/${{ env.PATH_RELEASES }}/releases/${{ github.base_ref }}
#          ssh ${{ env.TARGET_ENV }}@${{ secrets.DEPLOY_SSH_HOST }} <<EOF
#            cd ${{ env.PATH_RELEASES }} && if [ -L current ]; then unlink current; fi && ln -fs releases/${{ github.base_ref }} current
#            cd current
#            if [ -L .env ]; then unlink .env; fi && ln -fs ~/shared/api/.env
#            if [ -L data ]; then unlink data; fi && ln -fs ~/shared/data
#            cd public && ln -fs ~/shared/data && ln -fs ~/shared/api/opcache.php && ln -fs ~/shared/coupon && cd ..
#            APP_ENV=preprod ~/composer check-platform-reqs
#            APP_ENV=preprod ~/composer install --verbose --prefer-dist --no-progress --no-interaction
#            php bin/console doctrine:migrations:migrate -n --allow-no-migration
#            php bin/console cache:pool:clear cache.app cache.system doctrine.result_cache_pool doctrine.query_cache_pool doctrine.metadata_cache_pool
#            ~/shared/api/opcache.sh ${{ github.base_ref}}
#          EOF
#      - name: Slack message - deployment success
#        if: ${{ success() }}
#        uses: tokorom/action-slack-incoming-webhook@main
#        env:
#          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#        with:
#          attachments: |
#            [
#              {
#                "color": "#57db76",
#                "blocks": [
#                  {
#                    "type": "section",
#                    "text": {
#                      "type": "plain_text",
#                      "text": "branch deployment finished!"
#                    }
#                  }
#                ]
#              }
#            ]
#      - name: Slack message - deployment failure
#        if: ${{ failure() }}
#        uses: tokorom/action-slack-incoming-webhook@main
#        env:
#          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#        with:
#          attachments: |
#            [
#              {
#                "color": "#e52222",
#                "blocks": [
#                  {
#                    "type": "section",
#                    "text": {
#                      "type": "plain_text",
#                      "text": "branch deployment failed!"
#                    }
#                  }
#                ]
#              }
#            ]
#
#  publish-release:
#    # runs only when publishing a release (remove pre-release flag)
#    name: Publish release to prod
#    if: (github.event_name == 'release')
#    runs-on: ubuntu-latest
#    env:
#      ASSET: ${{ github.event.release.assets[0].name }}
#    steps:
#      - name: Set destination folder
#        id: dst-folder
#        run: echo "##[set-output name=folder]$(date +%F.%H%M%S)"
#
#      - name: Prepare SSH
#        uses: shimataro/ssh-key-action@v2.3.0
#        with:
#          key: ${{ secrets.DEPLOY_PRIVATE_KEY }}
#          known_hosts: ${{ secrets.DEPLOY_KNOWN_HOST }}
#
#      - name: Fetch Github Release Asset
#        id: asset-infos
#        uses: dsaltares/fetch-gh-release-asset@0.06
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          file: ${{ env.ASSET }}
#          target: ./${{ env.ASSET }}
#
#      - name: Send message - deployment start
#        uses: tokorom/action-slack-incoming-webhook@main
#        env:
#          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#        with:
#          text: API - ${{ steps.asset-infos.outputs.version }} Release deployment start
#          attachments: |
#            [
#              {
#                "color": "#57db76",
#                "blocks": [
#                  {
#                    "type": "section",
#                    "fields": [
#                      {
#                        "type": "mrkdwn",
#                        "text": "*action*: deploy (<${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}|follow>)"
#                      },
#                      {
#                        "type": "mrkdwn",
#                        "text": "*release*: ${{ steps.asset-infos.outputs.version }} (<${{ github.event.repository.html_url }}/releases/tag/v${{ steps.asset-infos.outputs.version }}|view>)"
#                      }
#                    ]
#                  },
#                  {
#                    "type": "section",
#                    "text": {
#                      "type": "mrkdwn",
#                      "text": "${{ github.event.release.body }}"
#                    }
#                  },
#                  {
#                    "type": "context",
#                    "elements": [
#                      {
#                        "type": "mrkdwn",
#                        "text": "launched by: ${{ github.actor }}"
#                      }
#                    ]
#                  }
#                ]
#              }
#            ]
#
#      - name: Deploy & change symlinks
#        env:
#          TARGET_ENV: smartpush
#          FOLDER: ${{ steps.dst-folder.outputs.folder}}
#        run: |
#          unzip ${{ env.ASSET }} -d api
#          ssh ${{ env.TARGET_ENV }}@${{ secrets.DEPLOY_SSH_HOST }} <<EOF
#            mkdir -p ${{ env.PATH_RELEASES }}/releases/${{ env.FOLDER }}
#          EOF
#          scp -r api/* ${{ env.TARGET_ENV }}@${{ secrets.DEPLOY_SSH_HOST }}:~/${{ env.PATH_RELEASES }}/releases/${{ env.FOLDER }}
#          ssh ${{ env.TARGET_ENV }}@${{ secrets.DEPLOY_SSH_HOST }} <<EOF
#            cd ${{ env.PATH_RELEASES }}/releases/${{ env.FOLDER }}
#            cp ~/shared/api/.env .env
#            sed -i --regexp-extended 's/RELEASE_API_NUMBER=%%/RELEASE_API_NUMBER=${{ steps.asset-infos.outputs.version }}/' .env
#            ln -fs ~/shared/data
#            APP_ENV=prod ~/composer check-platform-reqs
#            APP_ENV=prod ~/composer install --verbose --prefer-dist --no-progress --no-interaction --no-dev
#            php bin/console doctrine:migrations:migrate -n --allow-no-migration
#            php bin/console cache:pool:clear cache.app cache.system doctrine.result_cache_pool doctrine.query_cache_pool doctrine.metadata_cache_pool
#            php bin/console cache:clear
#            cd public
#            ln -fs ~/shared/data
#            ln -fs ~/shared/api/opcache.php
#            ln -fs ~/shared/coupon
#            ~/shared/api/opcache.sh ${{ env.FOLDER }}
#            cd ~/${{ env.PATH_RELEASES }}
#            if [ -L current ]; then unlink current; fi && ln -fs releases/${{ env.FOLDER }} current
#          EOF
#
#      #Need to checkout again as Sentry needs .git config
#      - name: Checkout code
#        uses: actions/checkout@v2.4.0
#        with:
#          fetch-depth: 0
#
#      - name: Create Sentry release
#        if: ${{ success() }}
#        uses: getsentry/action-release@v1.1.6
#        env:
#          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
#          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
#          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
#        with:
#          environment: prod
#          version: ${{ steps.asset-infos.outputs.version }}
#
#      - name: Slack message - deployment success
#        if: ${{ success() }}
#        uses: tokorom/action-slack-incoming-webhook@main
#        env:
#          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#        with:
#          attachments: |
#            [
#              {
#                "color": "#57db76",
#                "blocks": [
#                  {
#                    "type": "section",
#                    "text": {
#                      "type": "plain_text",
#                      "text": "Release deployment finished!"
#                    }
#                  }
#                ]
#              }
#            ]
#      - name: Slack message - deployment failure
#        if: ${{ failure() }}
#        uses: tokorom/action-slack-incoming-webhook@main
#        env:
#          INCOMING_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#        with:
#          attachments: |
#            [
#              {
#                "color": "#e52222",
#                "blocks": [
#                  {
#                    "type": "section",
#                    "text": {
#                      "type": "plain_text",
#                      "text": "Release deployment failed!"
#                    }
#                  }
#                ]
#              }
#            ]
